# ************************************************************
# Sequel Pro SQL dump
# Version 3408
#
# http://www.sequelpro.com/
# http://code.google.com/p/sequel-pro/
#
# Host: 127.0.0.1 (MySQL 5.5.14)
# Database: runemadsen2012
# Generation Time: 2012-05-18 19:40:28 -0400
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table posts
# ------------------------------------------------------------

DROP TABLE IF EXISTS `posts`;

CREATE TABLE `posts` (
  `frozen_tag_list` text,
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(50) DEFAULT NULL,
  `body` text,
  `created_at` datetime DEFAULT NULL,
  `route` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;

INSERT INTO `posts` (`frozen_tag_list`, `id`, `title`, `body`, `created_at`, `route`)
VALUES
	('',1,'Balloon Projections','<p>This video shows a series of audio responsive animations projected onto a cluster of balloons. The projections are going to be used as a part of the stage show for an upcoming US tour. The balloons will be mounted onto an old barrel organ that is a part of the musical performance.</p>\r\n<p><iframe src=\"http://player.vimeo.com/video/17891021?title=0&byline=0&portrait=0&color=ffd663\" width=\"600\" height=\"338\" frameborder=\"0\"></iframe></p>\r\n<p>The animations and the software framework is all done in OpenFrameworks. The framework is a Model-View-Controller framework that consists of a number of elements. By pressing \"r\" you will set the application into record mode, which will enable you to click on the screen to create a new ballon model object and assign the current mouse location to it. You can also plot the points directly on a video feed via the control panel (pressing space), which will automatically map the video coordinates to screen coordinates.</p>\r\n<p>Each ballon can be positioned and scaled individually via a custom control panel or via shortcuts on the keyboard. You can also displace the position and scale of all the ballons if needed. This is useful when mapping from the video feed to the projection space. You can save all the <em>Balloon</em> model objects to XML by pressing <em>Shift - S</em> and load them into the program by pressing <em>Shift - L</em>. The control panel will also keep track of it\'s settings from build to build via XML.</p>\r\n<p>There a 5 animations in the video: An animation showing coloured circles, an animation showing a PNG image of a head, an animation showing a sky of stars on each balloon, an animation showing singing heads and finally an animation showing letters. These animations can be controlled via MIDI: all of the animations extends the <em>Animation</em> class, which automatically takes care of the following process:</p>\r\n<p>The selected animation (the one current being shown) will get all of the balloon model objects from the <em>Sensing</em> class and automcatically create a BallonController object for each model object. These objects are also automatically updated every frame. The <em>Animation</em> class also handles all MIDI triggering, assigning a midi note to each <em>BalloonController</em> object and calling the <em>nodeOn()</em> and <em>nodeOff()</em> methods of this class.</p>\r\n<p>Creating an animation is a simple, 2-step process: First you need to extend the <em>Animation</em> class, which will serve as the base of this animation. Next, you need to extend the <em>BalloonController</em> class. The animation class will automatically create one of these objects for every <em>Balloon</em> model it receives from the <em>Sensing</em> class. To specifiy that you want exaclty these objects to be created, you need to implement the <em>getNewBalloonController()</em> method in you subclass of the <em>Animation</em> class and return your subclass of <em>BalloonController</em> in this method.</p>\r\n<p>To change the midi note each balloon corresponds to is as simple as pushing integers into the <em>_midiNotes</em> vector in your subclass of the <em>Animation</em> class. The balloons wil automatically get midi notes assigned, but you can customized these notes via this vector.</p>\r\n<p>The animation with a sky of stars uses the OpenGL Vertex Buffer Objects to draw the particle images. Each balloon draws around 1500 particles each, but I have found I can go to around 80.000 total particles still having a framerate around 60 fps.</p>\r\n<p><a target=\"_blank\" href=\"http://github.com/Ronze/SpatialMediaFinal\">Source Code on GitHub</a></p>\r\n	\r\n	\r\n	\r\n	','2010-05-05 16:58:02','balloon-projections'),
	('',2,'New website','<img alt=\"newhomepage\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/newhomepage.jpg\" />\r\n\r\n<p>During the last couple of years I have seen myself move in quite a few different directions. In 2009 I found myself updating numerous sites, depending on which of these areas I was working on. For my company I updated my portfolio on these pages. When I did PHP development, most of it was on forums or on <a target=\"_blank\" href=\"http://www.youcanjoomla.com\">my joomla blog</a>. When I recorded new music I started a new website for every project.</p>\r\n<p>In December 2009 I decided to gather all these websites in one, and this is the outcome. Because I\'m trying to cover all of my interests in one single blog, it may seem confusing to some, though I hope it\'s not mostly the case. Some posts will be strickly about code, some will be about my thoughts on graphic design and interaction.</p>\r\n<p>I know there\'s places on the website that doesn\'t quite look as they should, but I\'m very much caught up in grad. school, but feel free to comment anything you find interesting, wrong or irritating.</p>','2009-11-26 19:15:22','new-website'),
	('',3,'People Watching Plus at Come Out And Play','<img alt=\"comeoutandplay\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/comeoutandplay.jpg\" />\r\n\r\n<p>The game I did with a couple friends, People Watching Plus, have been accepted into the <a target=\"_blank\" href=\"http://www.comeoutandplay.org/\">Come Out And Play</a> festival 2010. If you\'re in New York June 5th, stop by the Old Stone House at 1pm and play test a fun and not so competitive game. Read more about the rules and location on the <a target=\"_blank\" href=\"http://www.comeoutandplay.org/2010_peoplewatchingplus.php\">Come Out And Play festivals</a> website.</p>','2010-05-20 02:27:19','people-watching-plus-at-come-out-and-play'),
	('',4,'ITP at TechCrunch Hackathon 2010','<iframe src=\"http://player.vimeo.com/video/11964814?title=0&byline=0&portrait=0&color=ffd663\" width=\"600\" height=\"450\" frameborder=\"0\"></iframe>\r\n\r\n<p>Yesterday I participated in TechCrunch\'s HackDisrupt with a team of 6 other fellow students from ITP. The idea of the event is for teams to come up with an idea, create it and present it on stage within a period of 20 hours. Our project was called API For the World and consisted of a physical device and an API build in Ruby on Rails. With this you can turn anything with a power cord into a networked object. It allows the electric appliances around us to communicate with the internet, filling the gap between \"smart\" and low-tech devices. We\'re calling this a social network for everyday objects, because you can use an online dashboard to create unique profiles for different objects in your house and connect them to a variety of web services (e.g. let your lamp post to Twitter or you oven post directly to Patchube every time it\'s being used).</p>\r\n\r\n<p>When the day started, we split into 2 groups: a group building the physical device and another group building the Rails app.</p>\r\n<p>The group building the physical device started the day by building their own current sensor. Sofy wrote a great blog post about this (http://yuditskaya.com/wordpress/). The box have a current sensor, an Arduino and an Xbee to wirelessly communicate with a Processing sketch on your computer. The box was meant to post directly to the internet, but we couldn\'t get a static IP on the network. The box also has a power outlet, so you can connect the box to your power outlet and any electric appliance to the box. See <a target=\"_blank\" href=\"http://itp.nyu.edu/~sz590/blog/2010/05/23/api-for-the-world/\">Shahars blog post about setting up the code</a>, and <a target=\"_blank\" href=\"http://github.com/shaharz/A4W-Arduino\">download the Arduino code via Github</a>.</p>\r\n<p>I started the day designing the webpage layout and converting this to static HTML pages. Cameron Cundiff scaffolded away in the Rails environment, and pretty soon we had a good looking website   API. We used Github for working on the Rails code at the same time, and you can <a target=\"_blank\" href=\"https://github.com/ckundo/a4w\">download the code for the Rails app on our Github repository</a>. For hosting the application we used <a target=\"_blank\" href=\"http://www.heroku.com\">Heroku</a>, which is an online hosting service you can push your code directly to using Git.</p>\r\n<p>By the morning we had a fully functional prototype: By turning on a lamp we could post tweets to Twitter. We had a fully working dashboard, where you can create new devices, browse their messages and create new behaviors (connecting them to external API\'s like Twitter, Facebook or Patchube - basically all sites with an API).</p>\r\n<p>It was definitely a great 20 hours of hacking, and it\'s surprising how fast you can actually build a prototype of your idea. Sometimes people tend to think a great project also require a great deal of planning (skethes, diagrams, user stories, etc..), but this weekend was a great reminder of how important it is to start producing immediatly. It gets you so much faster to the restructuring process that will eventually come in every project. It also makes you a lot less scared of it, because you haven\'t spent half a year getting to it.</p>\r\n<p>Photos on Flickr:<br /><a href=\"http://www.flickr.com/photos/imagima/sets/72157623994972293/\">http://www.flickr.com/photos/imagima/sets/72157623994972293/</a></p>\r\n<p>Press Coverage:<br /><a target=\"_blank\" href=\"http://techcrunch.com/2010/05/22/inside-disrupt-hackathon-video/\">http://techcrunch.com/2010/05/22/inside-disrupt-hackathon-video/</a><br /><a target=\"_blank\" href=\"http://www.zdnet.com/blog/weblife/best-of-techcrunch-disrupt-hack-day-demos/1743\">http://www.zdnet.com/blog/weblife/best-of-techcrunch-disrupt-hack-day-demos/1743</a></p>\r\n<p>Visit the API for the World Website:<br /><a target=\"_blank\" href=\"http://www.heroku.com\">http://www.heroku.com</a></p>','2010-05-24 18:51:57','itp-at-techcrunch-hackathon-2010'),
	('',5,'Generative Logo 1','<img alt=\"generative\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/generative.jpg\" />\r\n\r\n<p>Lately I\'ve been very interested in generative graphics: creating logos or designs based on code visualizations. This is one of my attempts to create an \"R\" using OpenFrameworks and the Box2D physics library. You can <a  target=\"_blank\" href=\"http://github.com/Ronze/Generative-Logo-1\">download the Source Code here</a></p>\r\n\r\n<iframe src=\"http://player.vimeo.com/video/9513121?title=0&byline=0&portrait=0&color=ffd663\" width=\"600\" height=\"450\" frameborder=\"0\"></iframe>','2010-02-17 04:24:21','generative-logo'),
	('',6,'itouchyoutouch','<iframe src=\"http://player.vimeo.com/video/10443431?title=0&byline=0&portrait=0&color=ffd663\" width=\"600\" height=\"450\" frameborder=\"0\"></iframe>\r\n\r\n<p>Itouchyoutouch is a prototype for an interactive installation I did with <a target=\"_blank\" href=\"http://www.addictivelabs.com/\">Nikolas Psaroudakis</a> in Open Frameworks. We wanted to create a way for people to interact and form connections across time using spatial media. The installation consists of a round table with a touch sensitive surface. When a user touches the screen, particles will be emitted from the outline of the users hand. The movement of the hand will be recorded and stored - along with the outline of the hand - in an XML file.</p>\r\n\r\n<img alt=\"touches_multi\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/touches_multi.jpg\" />\r\n\r\n<p>This allows other users to touch the surface and interact with recorded touches: When you touch the surface, the application finds the oldest touch and plays this back along with the current users touch.</p>\r\n\r\n<img alt=\"touches_noconnect\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/touches_noconnect.jpg\" />\r\n\r\n<p>When a user moves his hand on top of and old touch, the particles emitting from the 2 touches will establish gravity and start moving towards each other. The color of the particles will also change, signaling a connection.</p>\r\n\r\n<img alt=\"touches_connect\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/touches_connect.jpg\" />\r\n\r\n<p>The installation is built to allow multi-touch and can be used by many users at the same time.</p>\r\n\r\n<img alt=\"touches_multi2\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/touches_multi2.jpg\" />\r\n	\r\n	\r\n	\r\n	','2010-03-24 20:56:29','itouchyoutouch'),
	('',7,'People Watching Experiments ','<iframe src=\"http://player.vimeo.com/video/11126782?title=0&byline=0&portrait=0&color=ffd663\" width=\"600\" height=\"338\" frameborder=\"0\"></iframe>\r\n\r\n<p>This is a video I did with Scott Waynes Indiana, Nik Psaroudakis and Nien Lam. It shows us experimenting with placing objects on the sidewalk to redirect the flow of pedestrians.</p>','2010-04-23 23:54:46','people-watching-experiments'),
	('',8,'Best places to find data visualizations','<img alt=\"dataviz\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/dataviz.jpg\" />\r\n\r\n<p>I\'ve found that good data visualizations are hard to find. Even the best sites have post after post showing ugly bubble diagrams with Twitter connections. So here\'s my list of some of the best sources for great data visualizations I\'ve stumbled upon in 2009:</p>\r\n<p><a target=\"_blank\" href=\"http://infosthetics.com/\">http://infosthetics.com/</a> <br />Great site if you know where to look. Go back in the archives to find beautiful work.</p>\r\n<p><a target=\"_blank\" href=\"http://flowingdata.com\">http://flowingdata.com</a> <br />Not as good as infosthetics and also a much smaller site.</p>\r\n<p><a target=\"_blank\" href=\"http://www.nytimes.com/\">http://www.nytimes.com/</a> <br />Sounds weird, but their graphic department leaded by Steve Duenes come up with great, refined visuals.</p>\r\n<p><a target=\"_blank\" href=\"http://www.earlboykins.blogspot.com/\">http://www.earlboykins.blogspot.com/</a> <br />Minimalist graphs visualizing performances or everyday experiences.</p>\r\n<p><a target=\"_blank\" href=\"http://manyeyes.alphaworks.ibm.com/manyeyes/\">http://manyeyes.alphaworks.ibm.com/manyeyes/</a> <br />Not my favourite. Look for great data mashups, not great graphics.</p>\r\n<p><a target=\"_blank\" href=\"http://www.datamasher.org/\">http://www.datamasher.org/</a> <br />Same with this one.</p>\r\n<p>And some greats books:</p>\r\n<p><a target=\"_blank\" href=\"http://www.amazon.com/Maeda-Media-John/dp/0789305259/ref=sr_1_1?ie=UTF8&s=books&qid=1265860796&sr=8-1\">Maeda @ Media</a> <br />Not the best book about creative coding, but a nice look into the earlier works of John Maeda.</p>\r\n<p><a target=\"_blank\" href=\"http://www.amazon.com/Creative-Code-Computation-John-Maeda/dp/0500285179/ref=sr_1_1?ie=UTF8&s=books&qid=1265861008&sr=1-1\">Creative Code</a> <br />The better one by John Maeda.</p>\r\n<p><a target=\"_blank\" href=\"http://www.amazon.com/Fresh-Dialogue-Nine-Visible-Revealed/dp/1568988168/ref=sr_1_1?ie=UTF8&s=books&qid=1265860857&sr=1-1\">Graphic  Data Revealed</a> <br />A really good book. Short  and precise.</p>\r\n<p><a target=\"_blank\" href=\"http://www.amazon.com/Data-Flow-Visualising-Information-Graphic/dp/3899552172/ref=sr_1_1?ie=UTF8&s=books&qid=1265861104&sr=1-1\">Data Flow</a><br />A truly beautiful book about modern data visualization. 50 percent of the content is great, which is much, much higher than all other stuff around.</p>\r\n	\r\n	','2010-02-11 03:38:43','best-places-to-find-data-visualizations'),
	('',9,'Importing Processing into Eclipse on a Mac','<p>Lately I\'ve been doing a lot of Processing and it\'s pretty clear the the Processing IDE doesn\'t compare to powerful applications like Eclipse. There\'s an <a target=\"_blank\" href=\"http://processing.org/learning/tutorials/eclipse/\">excellent tutorial</a> on processing.org on how to import the core.jar Processing library into your Eclipse Java project. I tried the tutorial, but couldn\'t figure out how to import the core.jar - because when trying to import the filesystem, I couldn\'t expand the Processing applications folder. Because OSX treats applications like an encapsulated file, it\'s not possible to browse into the Processing folder and select the library. In Finder it\'s possible to right-click and select \"Show Package Contents\", but you cannot do this from inside the Eclipse dialog. This is how you solve the problem:</p>\r\n\r\n<p>1. Select your Applications folder and press \"OK\"</p>\r\n<img alt=\"eclipse1\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/eclipse1.jpg\" />\r\n\r\n<p>2. Manually add \"/Processing\" in the textfield.</p>\r\n<img alt=\"eclipse2\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/eclipse2.jpg\" />\r\n\r\n<p>3. Click \"Browse\". Now you will see the package contents of the Processing applications folder</p>\r\n<img alt=\"eclipse3\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/eclipse3.jpg\" />\r\n\r\n<p>4. Navigate to the core.jar file and import it.</p>\r\n<img alt=\"eclipse4\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/eclipse4.jpg\" />','2010-01-24 17:01:55','importing-processing-into-eclipse-on-a-mac'),
	('',10,'Silence is a Virus','<img alt=\"silence\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/silence.jpg\" />\r\n\r\n<p>I just released 4 new tracks with my band <em>Silence is a Virus</em>. The tracks can be streamed for free via <a target=\"_blank\" href=\"http://www.facebook.com/pages/Silence-Is-A-Virus/113178405360214\">Facebook</a>, or downloaded for free via <a href=\"http://www.silenceisavirus.com\">www.silenceisavirus.com</a>. The genre is a combination of post rock and alternative metal, something between Sigur Ros and Deftones. You are free to distribute the tracks as much as you like, and if you enjoy listening to them, please join our page on <a target=\"_blank\" href=\"http://www.facebook.com/pages/Silence-Is-A-Virus/113178405360214\">Facebook</a> or follow us on <a target=\"_blank\" href=\"http://www.twitter.com/silenceisavirus\">Twitter</a>.</p>\r\n	\r\n	','2010-05-30 00:22:29','silence-is-a-virus'),
	('',11,'Bicycle Design','<p>Growing up watching Tour de France with Danish film-maker and commentator Jørgen Leth on television has made  me a life-long fan of bicycling. From the history of bicycle journalism to the extreme sacrifices the riders must live through to perform at the top level, I am completely in love with the sport. This is also true when it comes to bicycle design. When my beautiful Fuji Track bike was smashed by a car a couple of weeks ago, I started looking at the 2010 bicycle designs and found this beautiful Eddy Merckx EMX-1  road bike that I completely fell for. Though I almost love everything about this bike, there is on thing that I - as a graphic designer - hate about most modern bicycle design: The amount of ugly logos and colors that destroy the beauty of the bicycle frame. I feel there\'s something ignorant about these designs, especially when considering the bicycle design from the past. Bicycles that people like Fausto Coppi, Eddy Merckx, Bernard Hinault and Luis Ocana rode. These were simple, elegant and beautiful designed sculptures.</p>\r\n\r\n<p>Just to make a simple test I removed all the logos from the beautiful EMX-1 in Photoshop, and I must say that the difference is enormous. It actually doesn\'t look like a bike for bowling team any more. Imagine what could be done with the color scheme to make this bike elegant. The biggest difference for me is the fact that now you actually see the beautiful, subtile logo on the front of the bike. Oh god, I would like to have my hands on one of these.</p>\r\n<p><strong>Before</strong></p>\r\n<img alt=\"eddy1\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/eddy1.jpg\" />\r\n<p><strong>After</strong></p>\r\n<img alt=\"eddy2\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/eddy2.jpg\" />','2010-08-02 05:06:06','bicycle-design'),
	('',12,'Light Sculpture','<iframe src=\"http://player.vimeo.com/video/15139821?byline=0&portrait=0&title=0&color=ffd663\" width=\"600\" height=\"338\" frameborder=\"0\"></iframe>\r\n\r\n<p>This video shows a light sculpture I built with Peter Holzkorn and Don Miller. The idea was to create a sculpture that uses light as the primary medium of communication. We created the sculpture with 4 long light bulbs hanging from the ceiling. The lights turns on and off in patterns, showing the almost flaming glow from each bulb when lit up. The idea behind the pattern was this: A digital byte consists of 8 bit, that is eight zero\'s or one\'s. The Arduino controlling the bulbs is converting a single letter from the alphabet at a time into an ASCII number and signaling this number in a 2-step sequence (a half byte at a time). This creates a continuous light pattern with similarities to morse code.</p>\r\n	','2010-09-21 03:15:13','light-sculpture'),
	('',13,'Video and Processing.js','<img alt=\"arduinoroll\" src=\"http://runemadsen-2012.s3.amazonaws.com/blog/arduinoroll.jpg\" />\r\n<p>I\'m currently working on a project with <a target=\"_blank\" href=\"http://urbanhonking.com/ideasfordozens/\">Greg Borenstein</a> and <a target=\"_blank\" href=\"http://zevenwolf.com/blog/\">Zeven Rodriguez</a>, trying to use HTML5 video and the Processing.js javascript library to create a more interactive way of documenting electronic projects... more about that later. <a target=\"_blank\" href=\"code/processingvideo/video.html\"></a></p>\r\n<p><a target=\"_blank\" href=\"/code/processingvideo/video.html\">This is a small example</a> showing how to overlay a canvas element on top of a video element. The ultimate goal is to control both the Processing canvas and the video via JQuery. In this example I\'m basically just setting the 2 elements to overlay each other via absolute positioning. The example is tested in Safari 5.02 and Chrome 6.04 on Snow Leopard.</p>\r\n<p><strong>Update: </strong>Greg tweaked the code to allow control of video canvas from within the Processing.js canvas. His code basically uses the mouseX variable in the processing.js javascript file and calls normal javascript (JQuery) methods embedded in the html page. Check out the link to the Github repo to download the code.</p>\r\n<p><a href=\"code/processingvideo/video.html\">See the Example</a>  <a href=\"http://github.com/runemadsen/ProcessingJSVideo\">Source Code on GitHub</a></p>','2010-09-29 18:43:22','video-and-processingjs'),
	('',14,'Self Portrait','<iframe src=\"http://player.vimeo.com/video/15547641?byline=0&title=0&portrait=0&color=ffd663\" width=\"600\" height=\"338\" frameborder=\"0\"></iframe>\r\n	\r\n	\r\n	','2010-10-07 16:15:50','self-portrait'),
	('',15,'Record video from C++','<p><strong>Update: I\'ve created an openframeworks wrapper around the VLC remote features. You can <a href=\"http://ofxaddons.com/repos/528\">find the details here</a></strong>.</p>\r\n\r\n<p>For a new project I needed to be able to record video from within an OpenFrameworks / Cinder project. I immediately started looking for libraries supporting this, but both of the frameworks fell short. Then I saw that the amazing <a target=\"_blank\" href=\"http://www.videolan.org/vlc/\">VLC player</a> had all that I needed:</p>\r\n\r\n<ol>\r\n<li>Full control from the command line</li>\r\n<li>Ability to capture from input devices</li>\r\n<li>Ability to save captured movie to file</li>\r\n</ol>\r\n\r\n<p>I researched how to run terminal commands on OSX from within C++, and found out that it\'s very easy using the <em>system()</em> function. So I created a <a target=\"_blank\" href=\"http://gist.github.com/624284\">Gist on Github that shows how to run a simple command from a C++ script</a>. All you need is to run the needed commands from C++ to make VLC do whatever you want to. Check out <a target=\"_blank\" href=\"http://wiki.videolan.org/VLC_command-line_help\">VLC\'s command line documentation</a> for more info. You may also need to look at the <a target=\"_blank\" href=\"http://wiki.videolan.org/Mac_OS_X\">OSX specific page</a>. I will continue to update <a href=\"http://github.com/runemadsen/TimeMachine\">this GitHub repository</a> with code as I continue to develop this project further.</p>\r\n	','2010-10-13 15:46:54','record-video-from-c'),
	('',16,'Transparent background in Processing.js','<p>This took me a while to figure out because the documentation on the processing.js is way behind. I wanted to overlay a processing.js element on top of a video canvas, which I already did a while ago, but updating to the newest version of processing.js made the canvas background grey. I searched through the source code and found out that to enable transparent background in your processing.js canvas, you need to add this directive to your javascript code:</p>\r\n\r\n<script src=\"https://gist.github.com/2077169.js\"> </script>\r\n\r\n<p>You can find a working example in<a target=\"_blank\" href=\"http://github.com/runemadsen/ArduinoDocs\"> this Github repository</a>.</p>\r\n	\r\n	\r\n	\r\n	\r\n	\r\n	','2010-10-15 01:03:52','transparent-background-in-processingjs'),
	('',17,'Using Datamapper MySQL w. Sinatra on OSX','						<p>Trying to set up Sinatra with Datamapper today, I was running into a lot of problems. I got errors when trying to install the mysql gem and the dm-mysql-adapter gem. When I actually managed to do it, Datamapper gave me the following error:</p>\r\n\r\n<p><em>Can\'t connect to local MySQL server through socket \'/opt/local/var/run/mysql5/mysqld.sock\'<br /></em></p>\r\n\r\n<p>I spent hours trying to fix it, but I finally suceeded. This is what worked for me: <a href=\"http://akrabat.com/computing/uninstalling-mysql-on-mac-os-x-leopard/\"></a></p>\r\n\r\n<ol>\r\n  <li><a href=\"http://akrabat.com/computing/uninstalling-mysql-on-mac-os-x-leopard/\">Uninstall Mysql</a> on your computer (you also may need to do <a target=\"_blank\" href=\"http://www.silverscripting.com/blog/2009/09/04/removing-mysql-on-snow-leopard/\">this</a>)</li>\r\n\r\n  <li>Uninstall the gems (sudo gem uninstall mysql, sudo gem uninstall dm-mysql-adapter)</li>\r\n  <li>Download the <a href=\"http://dev.mysql.com/downloads/mysql/\">latest mysql DMG</a> from the MySQL website</li>\r\n  <li>Install the gems (sudo gem install mysql, sudo gem install dm-mysql-adapter)</li>\r\n  <li>Restart your computer</li>\r\n  <li><a href=\"http://coryodaniel.com/index.php/2010/01/20/installing-mysql-from-dmg-on-mac-and-the-few-commands-to-make-it-work-on-the-command-line/\">Now do this</a> to make the socket path work</li>\r\n</ol>\r\n<p>That should hopefully make MySQL and Datamapper work. Connect like this in you app and you\'re good to go:</p>\r\n<script src=\"https://gist.github.com/2077151.js\"> </script>','2010-11-12 04:41:57','using-datamapper-with-mysql-and-sinatra-on-osx'),
	('',18,'I used to be somebody','		<iframe src=\"http://player.vimeo.com/video/17903170?title=0&byline=0&portrait=0&color=ffd663&loop=1\" width=\"600\" height=\"338\" frameborder=\"0\"></iframe>\r\n	','2010-12-16 07:32:00','i-used-to-be-somebody'),
	(NULL,19,'Thesis Essay','		<p>I\'m currently defining my thesis project, and this is a short essay illustrating some of the key points of my thesis idea.</p>\r\n\r\n<p><a href=\"https://docs.google.com/document/pub?id=1O1TpCVjcjjwD6vM4DWjENCGFh-AvEjOQzbUEnZoc2j4\">Thesis Essay - Google Doc</a></p>\r\n	','2011-02-26 19:45:20','thesis-essay'),
	('',21,'Write Me','<img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/write_me.jpg\" />\r\n\r\n<p>Times are super busy right now, so I\'ll just want to post this image of the latest project I did with Amy and Christine from ITP. It\'s a video sculpture programmed in <a href=\"http://www.openframeworks.cc\" target=\"_blank\">Open Frameworks</a> where people can leave a drawing using a tablet, and the sculpture plays back the drawings from the collective pool of all past visitors. As soon as my schedule clears I\'ll do a bigger write up in the portfolio section of this site.</p>\r\n	','2011-02-28 02:38:32','write-me'),
	('',22,'Why beginners should choose Ruby','<p>I\'ve rarely been as excited about anything related to web development as when making the switch to Ruby a couple of years ago. But it was when my fellow student from <a href=\"http://www.itp.nyu.edu\">ITP</a>, <a href=\"http://urbanhonking.com/ideasfordozens/\" target=\"_blank\">Greg Borenstein</a> introduced me to <a href=\"http://www.sinatrarb.com/\">Sinatra</a> that I first noticed how perfect an environment Ruby is for web dev beginners.</p>\r\n\r\n<p>In this post I will try to illustrate why I think Ruby and Sinatra should be the preferred environment for students who have never programmed before - and why it beats PHP any time.</p>\r\n\r\n<p><strong>The Ruby syntax</strong></p>\r\n<p>One of the strongest things about Ruby is the language syntax. In Ruby there are no messy variable symbols ($), no semi-colons (;), and the use of curly brackets ({}) and parenthesis () is often optional. This means shorter, readable code. The language structure in Ruby is as close to a written language structure as possible.</p>\r\n\r\n<p>In the following few examples I\'ll try to compare the readability between Ruby and PHP. First is an example of creating an associative array in both languages:</p>\r\n\r\n<script src=\"https://gist.github.com/2075819.js?file=associative.rb\"></script>\r\n\r\n<p>The last evaluated value in a Ruby function is always used as the return value. Notice the optional parenthesis in the Ruby function call.</p>\r\n\r\n<script src=\"https://gist.github.com/2076465.js\"> </script>\r\n\r\n<p>One of the most important things about Ruby is that it\'s a pure object oriented language, which means that everything is an object (including numbers and string literals). Take the following code that outputs \"Hello\" 10 times, using the \'times\' function of the Number class. Is that not the most read-able for-loop you have ever seen?</p>\r\n\r\n<script src=\"https://gist.github.com/2076498.js\"> </script>\r\n\r\n<p>There is a clean and defined place for every Ruby function, and this makes the life of the beginner much easier. The exact opposite is true for PHP, where you have to search through odd global functions to perform standard routines. As an example, in PHP you use sizeof() to count the size of an array, but strlen() to count the size of a string. In Ruby it\'s a different story:</p>\r\n	\r\n<script src=\"https://gist.github.com/2076531.js\"> </script>\r\n\r\n<p>This leads me to another important fact about Ruby: It\'s so well structured that your guess if often enough to find the correct function call of an object. I love this next one. Ruby functions that return boolean values have a question mark at the end:</p>\r\n\r\n<script src=\"https://gist.github.com/2076544.js\"> </script>\r\n\r\n<p><strong>Class properties and symbols</strong></p>\r\n<p>You remember all that time you\'ve spent scrolling up and down in your PHP classes to define or edit class properties and constants, because they need to be defined at the top of the class, but used from within your functions? Ruby gets rid of all this by allowing class properties (using @) and constants (called symbols, using :) to be declared on the fly. The following code examples both do the same thing: create an associative array as a class property and use a constant as a key and a string as a value. PHP uses 10 lines of code to do this. Ruby uses 5. Which example do you think is the easiest to understand for a beginner?</p>\r\n	\r\n<script src=\"https://gist.github.com/2076561.js\"> </script>\r\n\r\n<p><strong>The Ruby Gem system</strong></p>\r\n<p>One of the areas where PHP really fails is with libraries. Even though people have been using PHP for many years, I\'ve never seen a student use a PHP library in my life. This is a problem with the language framework: To use a PHP library you have to download it, unzip it, copy it to your server root and include it in your script. Kind of a hassle. But what happens when the library gets updated? Then you have to do it all over again.</p>\r\n\r\n<p>One of the most powerful things about Ruby is the Gem system. It\'s a small program that comes with Ruby that can download, update or delete Ruby libraries from a central repository. You can also create your own online repository if you want to. Because Ruby has a central place for all libraries this means that the beginner has easy access to well-documented and well-maintained Ruby libraries (called gems).</p>\r\n	\r\n<p>One of these gems is the Bundler gem, which helps you automatically install the gems you need for your project. Create a simple file in your project folder that lists all the gems your project needs. Run a single command in terminal, \"bundle install\" , and all your gems will install on the machine. Imagine how easy it is to update libraries in a project: update the Gemfile and run the command again. Deploying to a server that has no Ruby gems installed? No problem. Run \"bundle install\" after uploading your project files and you\'re ready to go.</p>\r\n\r\n<script src=\"https://gist.github.com/2076568.js\"> </script>\r\n\r\n<p>Ruby Gem makes the life of a beginner so much easier, as they almost never have to build complicated functionality by themselves. If someone has done it before, it\'s probably accessible as a gem. Want to build a Twitter application that saves all of your tweets as PDF\'s? No problem. Using the Prawn and Twitter gem this is possible with only 10 lines of code.</p>\r\n\r\n<p><strong>Databases and ORM\'s</strong></p>\r\n<p>I have not written a single line of SQL code since I started developing in Ruby. This is because there are tons of gems that take care of the database calls for you, the so-called Object Relational Mappers. All programmers know the problem: you work and think in object oriented patterns, but still you need to write SQL calls to fill your models. This is not so much a problem when you have single model to fill, but what if your project demands class associations (my blog post has many comments), or even polymorphic associations (my blog post has many comments. Comments can have nested comments)? There is simply no way a beginner can wrap his head around this easily.</p>\r\n\r\n<p>ORM\'s exist as a layer between the code and the database, providing excellent abstraction for the beginner. In other words, it allows you to stay in the object-oriented world. As an example, let\'s look at how you would create a blog using <a href=\"http://datamapper.org/\" target=\"_blank\">Datamapper</a>, a perfect ORM fit for your Sinatra application. First you define your models and then run the command \"auto_migrate!\" to create the tables in your database.</p>\r\n\r\n<script src=\"https://gist.github.com/2076588.js\"> </script>\r\n\r\n<p>Then you can save data from Ruby to the database. Notice how my_post.comments.create automatically creates and saves a comment belonging to my_post:</p>\r\n\r\n<script src=\"https://gist.github.com/2076667.js\"> </script>\r\n\r\n<p>And you can show the data on your website. Notice how all the comments automatically gets build in the comments array of the Post objects:</p>\r\n\r\n<script src=\"https://gist.github.com/2076677.js\"> </script>\r\n\r\n<p>And that\'s basically it. Using ORM\'s the beginner don\'t have to worry about SQL calls, as DataMapper will take care of all the querying.</p>\r\n	\r\n<p><strong>IRB</strong></p>\r\n<p>Ruby comes with an interactive console, which allows you to type code and get the results immediately. For the beginner this can be an excellent way of testing code without having to worry about creating Ruby files or classes. The interactive console is opened by typing \"irb\" into a terminal window:</p>\r\n\r\n<script src=\"https://gist.github.com/2076685.js\"> </script>\r\n\r\n<p><strong>Sinatra</strong></p>\r\n<p>Sinatra is a micro-framework perfectly suited for a beginner. You can write a Sinatra application in one single file or use view files to separate code and formatting. In Sinatra you write a function for every route in your website, also specifying the type of HTTP request. This is an excellent approach for newcomers, as it learns the beginner the basic concepts of HTTP requests and routes. The following is a simple Sinatra application specifying 3 routes available for GET requests. Notice the last route. It allows visitors to visit e.g. /greeting/rune, and Sinatra automatically parses the value of :yourname into an associative array and makes it available in the function.</p>\r\n\r\n<script src=\"https://gist.github.com/2076708.js\"> </script>\r\n\r\n<p>Another great thing about Sinatra is how easy it is to separate the controller code from the view. This is standard practice for any web project, and with Sinatra it is as easy as creating a \'views\' folder, create the views, and render them with one line of code. All class properties will be available in the rendered view, as shown in this simple greeting application:</p>\r\n\r\n<script src=\"https://gist.github.com/2076718.js\"> </script>\r\n\r\n<p>With Sinatra it\'s ridiculously  easy to build your own API, using the GET, POST, PUT, DELETE functions. This example is taken directly from the <a href=\"http://sinatra-book.gittr.com/\" target=\"_blank\">Sinatra Book</a>:</p>\r\n\r\n<script src=\"https://gist.github.com/2076734.js\"> </script>\r\n\r\n<p><strong>Heroku</strong></p>\r\n<p>No programming language is worth anything without easy deployment, and this is where PHP has been successful. With PHP you can upload your files to a server via FTP and the site is online immediately. However this approach quickly becomes a problem when working with bigger projects. Either you choose to edit your PHP-files on your local computer and upload them to the server manually via your FTP client, or you choose to edit the files directly on the server. I\'ve seen students doing both things, and in the end it\'s a frustrating way of working. If you edit your files on your local computer, you have no idea what files you actually changed, and you often have to upload the entire project again. This is not a great approach if you\'re building your site using Drupal that ships with +8000 files. Editing the files directly on the server is not a better alternative, as your local copy gets out of sync, and the live site will crash if you make any coding mistakes.</p>\r\n	\r\n<p><a href=\"http://www.heroku.com\">Heroku</a> is a rock-solid Ruby platform that provides free hosting for your Ruby site. Heroku ships with a heroku gem, which allows you to create a domain and deploy your files from your local computer. The following commands will install the Heroku gem and create your personal web space on http://rune.heroku.com:</p>\r\n\r\n<script src=\"https://gist.github.com/2076763.js\"> </script>\r\n\r\n<p>Heroku integrates with the version control system Git, which means that you can upload your code using one simple command. This command will only upload your changes since last push, and you will never find yourself looking for updated files in your FTP client ever again.</p>\r\n	\r\n<script src=\"https://gist.github.com/2076768.js\"> </script>\r\n\r\n<p>Using Heroku does require the beginner to learn the basic concepts of Git. This can be challenging for a beginner who has never used the command line before. Fortunately there is a number of great GUI\'s like <a href=\"http://www.git-tower.com/\" target=\"_blank\">Git Tower</a> that provides a clean interface for the beginner. However I\'m a big supporter of learning basic command line usage to beginners. Git can basically be operated using very few commands:</p>\r\n\r\n<script src=\"https://gist.github.com/2076775.js\"> </script>\r\n\r\n<p><strong>Conclusion</strong></p>\r\n<p>I feel strongly about Sinatra as the perfect tool for teaching web development, especially in places where non-programmers need to learn to sketch out prototypes fast. On top of that, students who learn Sinatra can jump to Rails when building larger-scale applications. Almost everything about the Ruby/Sinatra combination seems like a perfect match for the web dev beginner: The Ruby syntax, excellent documentation, clear separation of code and views, great ORM\'s and an easy and understandable introduction to HTTP requests through the Sinatra API. On top of that comes easy deployment with Heroku.</p>\r\n\r\n<p>Just like the professional web development firms have moved away from PHP, I think it\'s time for educational institutions to take the same approach. The reasons for using Ruby instead of PHP are simply too many.</p>\r\n\r\n<p>Much of this is directly inspired by discussions with <a href=\"http://urbanhonking.com/ideasfordozens/\">Greg Borenstein</a> around the use of Ruby and Sinatra at <a href=\"http://www.itp.nyu.edu\" target=\"_blank\">ITP</a>.</p>','2011-03-06 23:34:21','why-beginners-should-choose-ruby'),
	('',23,'Codeconf Visualizations','<p>Screenshots from 2 data visualizations I installed in the lobby at Github\'s Codeconf last weekend.</p>\r\n\r\n<p><img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/codeconf_1.jpg\" /></p>\r\n\r\n<p><img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/codeconf_2.jpg\" /></p>','2011-04-11 15:34:21','codeconf-visualizations'),
	('',24,'Thoughts on Design','<a href=\"http://runemadsen.s3.amazonaws.com/slides/thoughtsondesign.pdf\"><img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/thoughts-on-design.jpg\" /></a>\r\n\r\n<p>It\'s been so long since I\'ve posted anything on the blog. My schedule has been packed with graduating from ITP, starting work as an interactive developer at the New York Times, and working at ITP as a resident researcher. </p>\r\n\r\n<p>I thought I\'d post these slides from a workshop I gave today about how to think about design in digital media. I\'m hoping to expand them into a series of tutorials (hopefully on my re-designed website after Christmas), but until now this will have to do.</p>\r\n\r\n<p>You can <a href=\"http://runemadsen.s3.amazonaws.com/slides/thoughtsondesign.pdf\">download the slides as a PDF</a> here.</p>','2011-10-25 23:55:21','thoughts-on-design'),
	('',25,'Generative Artwork','<p>Here are a few examples of the simple generative artwork I made for the band <a href=\"http://www.twitter.com/silenceisavirus\">Silence is a Virus</a>. All images are generated using <a href=\"http://www.processing.org\">Processing</a>.</p>\r\n\r\n<p><img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/silence_cover_1.jpg\"></p>\r\n\r\n<p><img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/silence_cover_2.jpg\"></p>\r\n\r\n<p><img src=\"http://runemadsen-2012.s3.amazonaws.com/blog/silence_cover_3.jpg\"></p>','2012-04-04 11:36:00','generative-artwork');

/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table projects
# ------------------------------------------------------------

DROP TABLE IF EXISTS `projects`;

CREATE TABLE `projects` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `short_description` text,
  `long_description` text,
  `image` varchar(255) DEFAULT NULL,
  `freeform` text,
  `published` tinyint(1) DEFAULT '1',
  `ordering` int(11) DEFAULT '99',
  `route` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `projects` WRITE;
/*!40000 ALTER TABLE `projects` DISABLE KEYS */;

INSERT INTO `projects` (`id`, `title`, `short_description`, `long_description`, `image`, `freeform`, `published`, `ordering`, `route`, `created_at`)
VALUES
	(1,'Balloon Projections','<p>A set of interactive visuals projected onto balloons, made for the Danish musician <a href=\"http://www.ohlandmusic.com\">Oh Land</a>. Custom software monitors beats and strokes from the instruments on stage, resulting in visuals controlled in real-time by the band during the live concert. The project is a collaboration with <a href=\"http://www.fridgebuzzz.com/\">Paul Rothman</a>.</p>',NULL,'http://runemadsen-2012.s3.amazonaws.com/work/balloon-projections.jpg',NULL,1,10,'ohland-balloon-visuals',NULL),
	(2,'City Lights','<p>This short film is an experiment in using code to manipulate video. Custom software analyzes the frequencies in the soundtrack and maps these bands to windows in the surrounding buildings, blinking the lights when a frequency is triggered. The result is a lyrical combination of reality and dream.</p>',NULL,'http://runemadsen-2012.s3.amazonaws.com/work/city-lights.jpg',NULL,1,40,'city-lights-new-york',NULL),
	(3,'Tile Puzzle',NULL,NULL,'http://runemadsen-2012.s3.amazonaws.com/work/tile-puzzle.jpg',NULL,1,50,'tile-puzzle',NULL),
	(4,'People Watching Plus',NULL,NULL,'http://runemadsen-2012.s3.amazonaws.com/work/people-walking.jpg',NULL,1,60,'people-watching-plus',NULL),
	(5,'Speech Comparison',NULL,NULL,'http://runemadsen-2012.s3.amazonaws.com/work/speech-comparison.jpg',NULL,1,90,'speech-comparison',NULL),
	(6,'Byte Sculpture',NULL,NULL,'http://runemadsen-2012.s3.amazonaws.com/work/byte-sculpture.jpg',NULL,1,80,'byte-sculpture',NULL),
	(7,'Drab',NULL,NULL,'http://runemadsen-2012.s3.amazonaws.com/work/drab.jpg',NULL,1,70,'drab',NULL),
	(8,'Write Me','<p>Write Me is an interactive sculpture made of paper and strings hanging from the ceiling. The sculpture records drawings from visitors, and plays these drawings back, serving as a cumulative memory bank of past visitors.</p>',NULL,'http://runemadsen-2012.s3.amazonaws.com/work/write-me.jpg',NULL,1,20,'write-me',NULL),
	(9,'I Used To Be Somebody','<p>\"I Used To Be Somebody\" is an interactive video sculpture made out of an old Macintosh Classic 2. This project is a collaboration with <a href=\"http://www.39forks.com\">Scott Wayne Indiana</a>.</p>',NULL,'http://runemadsen-2012.s3.amazonaws.com/work/i-used-to-be-somebody.jpg',NULL,1,30,'i-used-to-be-somebody',NULL),
	(10,'Generative Logo',NULL,NULL,'http://runemadsen-2012.s3.amazonaws.com/work/generative-logo.jpg',NULL,1,100,'generative-logo',NULL);

/*!40000 ALTER TABLE `projects` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table taggings
# ------------------------------------------------------------

DROP TABLE IF EXISTS `taggings`;

CREATE TABLE `taggings` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `taggable_id` int(10) unsigned NOT NULL,
  `taggable_type` varchar(50) NOT NULL,
  `tag_context` varchar(50) NOT NULL,
  `tag_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_taggings_tag` (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



# Dump of table tags
# ------------------------------------------------------------

DROP TABLE IF EXISTS `tags`;

CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_tags_name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;




/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
